<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="3db28576-ca3d-41ed-86b4-6a9457a26eba" created="3.2.0" activeEnvironment="Albert_UAT" name="AlbertMobile" updated="3.2.5" encryptionMode="Not encrypted" resourceRoot="" compositeProjectFormat="1.3" xmlns:con="http://eviware.com/soapui/config">
  <con:settings/>
  
  
  <con:savedRecentRuns>1</con:savedRecentRuns>
  <con:requirements/>
  <con:properties>
    <con:property>
      <con:name>Origin</con:name>
      <con:value>https://serviceuattest.albertinvent.com</con:value>
    </con:property>
    <con:property>
      <con:name>Content-Type</con:name>
      <con:value>application/json</con:value>
    </con:property>
  </con:properties>
  <con:wssContainer/>
  <con:databaseConnectionContainer/>
  <con:jmsConnectionContainer/>
  <con:oAuth2ProfileContainer/>
  <con:oAuth1ProfileContainer/>
  
  <con:reporting/>
  <con:eventHandlers type="RequestFilter.filterRequest" name="RequestFilter.filterRequest">
    <con:script>// Sample event script to add custom HTTP header to all outgoing REST, SOAP and HTTP(S) calls
// This code is often used for adding custom authentication to SoapUI Pro tests

// If hardcoding the token, uncomment and change line 5
// token = '4567'

// If your token is parameterized in Project level custom property, uncomment line 8
// token = request.parent.testCase.testSuite.project.getProperty('auth_token').getValue()

// To modify all outgoing calls, remove comments from lines 11 to 16
// headers = request.requestHeaders
// if (headers.containsKey('auth_token2') == false) {
//   headers.put('auth_token2', token)
//   request.requestHeaders = headers
// }</con:script>
  </con:eventHandlers>
  <con:eventHandlers type="TestRunListener.afterStep" name="TestRunListener.afterStep">
    <con:script>// Save all test step results into files
// Change the directory path in line 5 to a location where you want to store details
// then uncomment lines 5 to 10

// filePath = 'C:\\tempOutputDirectory\\'
// fos = new java.io.FileOutputStream(filePath + testStepResult.testStep.label + '.txt', true)
// pw = new java.io.PrintWriter(fos)
// testStepResult.writeTo(pw)
// pw.close()
// fos.close()</con:script>
  </con:eventHandlers>
  <con:environment id="dbdfffe8-ed12-4227-a588-edce6db7565c" name="jdbcneww" index="0">
    <con:service type="REST" name="Version 2.0">
      <con:endpoint authProfile="Inherit From Parent" username="" password="" domain="" incomingWss="" outgoingWss="" wssTimeToLive="" wssType="" proxyHost="" proxyPort="" proxyUsername="" proxyPassword="">https://serviceuattest.albertinvent.com</con:endpoint>
    </con:service>
    <con:property>
      <con:name>Origin</con:name>
      <con:value>albertdev.cluster-ro-cmcbffx2qw0u.us-west-1.rds.amazonaws.com</con:value>
    </con:property>
    <con:property>
      <con:name>Content-Type</con:name>
      <con:value/>
    </con:property>
    <con:databaseConnectionContainer/>
    <con:jmsConnectionContainer/>
  </con:environment>
  <con:environment id="8d95e722-cc8f-4196-9964-32044018df97" name="Albert_UAT" index="1">
    <con:service type="REST" name="Version 2.0">
      <con:endpoint authProfile="No Authorization" proxyHost="" proxyPort="" proxyUsername="" proxyPassword="">https://serviceuattest.albertinvent.com</con:endpoint>
    </con:service>
    <con:property>
      <con:name>Content-Type</con:name>
      <con:value>application/json</con:value>
    </con:property>
    <con:property>
      <con:name>Origin</con:name>
      <con:value>https://serviceuattest.albertinvent.com</con:value>
    </con:property>
    <con:databaseConnectionContainer/>
    <con:jmsConnectionContainer/>
  </con:environment>
  <con:authRepository/>
  
  
  
  
  <con:environmentSpec>
    <con:entry environmentId="8d95e722-cc8f-4196-9964-32044018df97">
      <con:authProfile>No Authorization</con:authProfile>
    </con:entry>
  </con:environmentSpec>
  <con:tags/>
</con:soapui-project>